0 info it worked if it ends with ok
1 verbose cli [ 'C:\\Program Files\\nodejs\\\\node.exe',
1 verbose cli   'C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js',
1 verbose cli   'publish' ]
2 info using npm@1.4.14
3 info using node@v0.10.29
4 verbose node symlink C:\Program Files\nodejs\\node.exe
5 verbose publish [ '.' ]
6 verbose cache add [ '.', null ]
7 verbose cache add name=undefined spec="." args=[".",null]
8 verbose parsed url { protocol: null,
8 verbose parsed url   slashes: null,
8 verbose parsed url   auth: null,
8 verbose parsed url   host: null,
8 verbose parsed url   port: null,
8 verbose parsed url   hostname: null,
8 verbose parsed url   hash: null,
8 verbose parsed url   search: null,
8 verbose parsed url   query: null,
8 verbose parsed url   pathname: '.',
8 verbose parsed url   path: '.',
8 verbose parsed url   href: '.' }
9 silly lockFile 3a52ce78- .
10 verbose lock . C:\Users\Dan\AppData\Roaming\npm-cache\3a52ce78-.lock
11 verbose tar pack [ 'C:\\Users\\Dan\\AppData\\Roaming\\npm-cache\\restful-api\\1.0.0\\package.tgz',
11 verbose tar pack   '.' ]
12 verbose tarball C:\Users\Dan\AppData\Roaming\npm-cache\restful-api\1.0.0\package.tgz
13 verbose folder .
14 info prepublish restful-api@1.0.0
15 silly lockFile 1f1177db-tar tar://.
16 verbose lock tar://. C:\Users\Dan\AppData\Roaming\npm-cache\1f1177db-tar.lock
17 silly lockFile 6ebe261d-he-restful-api-1-0-0-package-tgz tar://C:\Users\Dan\AppData\Roaming\npm-cache\restful-api\1.0.0\package.tgz
18 verbose lock tar://C:\Users\Dan\AppData\Roaming\npm-cache\restful-api\1.0.0\package.tgz C:\Users\Dan\AppData\Roaming\npm-cache\6ebe261d-he-restful-api-1-0-0-package-tgz.lock
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile 1f1177db-tar tar://.
21 silly lockFile 6ebe261d-he-restful-api-1-0-0-package-tgz tar://C:\Users\Dan\AppData\Roaming\npm-cache\restful-api\1.0.0\package.tgz
22 silly lockFile 6ebe261d-he-restful-api-1-0-0-package-tgz tar://C:\Users\Dan\AppData\Roaming\npm-cache\restful-api\1.0.0\package.tgz
23 silly lockFile 2b36c027--cache-restful-api-1-0-0-package C:\Users\Dan\AppData\Roaming\npm-cache\restful-api\1.0.0\package
24 verbose lock C:\Users\Dan\AppData\Roaming\npm-cache\restful-api\1.0.0\package C:\Users\Dan\AppData\Roaming\npm-cache\2b36c027--cache-restful-api-1-0-0-package.lock
25 silly lockFile 2b36c027--cache-restful-api-1-0-0-package C:\Users\Dan\AppData\Roaming\npm-cache\restful-api\1.0.0\package
26 silly lockFile 2b36c027--cache-restful-api-1-0-0-package C:\Users\Dan\AppData\Roaming\npm-cache\restful-api\1.0.0\package
27 silly lockFile 3a52ce78- .
28 silly lockFile 3a52ce78- .
29 silly publish { name: 'restful-api',
29 silly publish   version: '1.0.0',
29 silly publish   description: 'Quick and painless RESTful interface for node apps.',
29 silly publish   main: 'api.js',
29 silly publish   scripts: { test: 'jasmine-node tests' },
29 silly publish   repository:
29 silly publish    { type: 'git',
29 silly publish      url: 'https://github.com/cobbdb/rest-interface.git' },
29 silly publish   author:
29 silly publish    { name: 'Dan Cobb',
29 silly publish      email: 'cobbdb@gmail.com',
29 silly publish      url: 'http://www.github.com/cobbdb' },
29 silly publish   dependencies: { extend: '~1.3.0' },
29 silly publish   devDependencies: { 'jasmine-node': '~1.14.5' },
29 silly publish   bugs: { url: 'https://github.com/cobbdb/rest-interface/issues' },
29 silly publish   homepage: 'https://github.com/cobbdb/rest-interface',
29 silly publish   directories: { test: 'tests' },
29 silly publish   keywords: [ 'rest', 'api', 'restful', 'seam', 'standard', 'simple' ],
29 silly publish   license: 'MIT',
29 silly publish   gitHead: '8084ca5dec5de18aed2832579a5d2e84e81f8872',
29 silly publish   readme: 'ERROR: No README data found!',
29 silly publish   _id: 'restful-api@1.0.0',
29 silly publish   _shasum: '95298d36265e1b87d70f25d41ac11497aeb18a76',
29 silly publish   _from: '.' }
30 verbose url raw restful-api
31 verbose url resolving [ 'https://registry.npmjs.org/', './restful-api' ]
32 verbose url resolved https://registry.npmjs.org/restful-api
33 info trying registry request attempt 1 at 23:09:14
34 http PUT https://registry.npmjs.org/restful-api
35 http 403 https://registry.npmjs.org/restful-api
36 verbose headers { date: 'Sun, 20 Jul 2014 06:08:53 GMT',
36 verbose headers   server: 'CouchDB/1.5.0 (Erlang OTP/R14B04)',
36 verbose headers   'content-type': 'application/json',
36 verbose headers   'cache-control': 'max-age=60',
36 verbose headers   'content-length': '13168',
36 verbose headers   'accept-ranges': 'bytes',
36 verbose headers   via: '1.1 varnish',
36 verbose headers   'x-served-by': 'cache-jfk1022-JFK',
36 verbose headers   'x-cache': 'MISS',
36 verbose headers   'x-cache-hits': '0',
36 verbose headers   'x-timer': 'S1405836532.695482,VS0,VE346',
36 verbose headers   'keep-alive': 'timeout=10, max=50',
36 verbose headers   connection: 'Keep-Alive' }
37 error publish Failed PUT 403
38 error Error: forbidden user: cobbdb not authorized to modify restful-api
38 error Changed: description "RESTful APIs via Convention." -> "Quick and painless RESTful interface for node apps."
38 error Changed: dist-tags.latest "0.1.8" -> "1.0.0"
38 error Added: versions.1.0.0
38 error Changed: readme "# Beta Testing Under Way\u000a\u000aThis package is now in use in a beta application. Expect some evolution still, though it is certainly ready for usage in apps now! \u000a\u000a### Contributions\u000a\u000a... if you would like to help, feel free to write some unit tests. ;)\u000a\u000a# RESTful API\u000a\u000a## What is this thing?\u000a\u000aREST. It's not just a bunch of letters and a vague way to get things done. It is a way of looking at interfacing with systems using nouns and verbs. Luckily, over HTTP, we have both! All we have to do is start structuring our requests in a grammatically correct way. The result is faster development, easier maintenance and an all around better way to build APIs. \u000a\u000a## How's it work?\u000a\u000aHere are a quick battery of RESTful APIs for a Blog \"Post\" Resource:\u000a\u000a       GET /posts    // Returns a list of all posts available!\u000a      POST /posts    // Creates a new post!\u000a       GET /posts/1  // Returns a single post!\u000a       PUT /posts/1  // Updates a post that exists!\u000a    DELETE /posts/1  // Deletes a post that exists!\u000a\u000aIt should become fairly obvious why there are so many advantages of this style; Convention over configuration. Powerful simplicity. Best of all, it's more or less become the standard API style over the web. No assumptions are made (in this framework) about your applications general structure. Security is strongly supported in each resource, but you can still structure your app as you like. It is recommended that you follow REST guidelines and make it possible for each individual request to require authorization, rather than relying purely on sessions.\u000a\u000aOne of the few downfalls of REST is the lack of batch APIs. Continuing the Blog example, want to delete 80 posts? Good luck. Make 80 calls to the API. This library attempts to solve that problem on a larger scale, too. But you shouldn't have to write any extra code. It will look to your code as if 80 separate calls were made (if you use the batch functionality of this library).\u000a\u000a    POST /posts/batch\u000a         Body: { 'delete': [1, 2, 3, 4, 5, 10, 42, 68, 99] }\u000a\u000aThe result? Returns an array of response objects, just as if you had made all 9 calls individually! Need to make an update call for a whole bunch of posts at a time? Create a bunch? Easy peasy:\u000a\u000a    POST /posts/batch\u000a         Body: { 'update': { 1: { title: 'My new title!' }, 2: { author: 'Walter White' } } }\u000a    POST /posts/batch\u000a         Body: { 'create': [{ name: 'New post!', body: 'Some stuff..' }, { name: 'Another...', body: 'This is nifty!'}] }\u000a\u000a#### Limitations and/or Assumptions\u000a\u000a* ExpressJS: Most apps in Node utilize Express, and this library is no different. If you have thoughts on how to extend it past express, I'm all ears.\u000a* HTTP PATCH vs PUT. Essentially, a PUT over-writes the object, while a PATCH only over-writes the attributes given. In practice, PUT becomes very rare when you make this distinction. So only PUT is supported, and you can choose to have it act as it normally would, or as a PATCH in your resource. I'll say this though: Modern devices need to consume less bandwidth to be as responsive as possible. I recommend not adding extra fields to your requests if you can help it.\u000a* That's it! You define your security model, you can use whatever databases you're currently using; You just have to follow some basic patterns in order to get started.\u000a\u000a## Why did I do this?\u000a\u000aNone of the available REST libraries did what I wanted. They were either too obscure, not well documented enough, or just flat out got REST wrong. My goals for this project are:\u000a\u000a1. Keep it RESTful. It isn't that hard, and you'll thank yourself for it after you've done it for a while.\u000a2. Simple RESTful APIs should be fast to build, but also feature rich.\u000a3. Complicated APIs shouldn't require extra architecting. They should be able to use the same code as smaller codebases.\u000a4. RESTful by default. HTTP verbs and nouns, but only for what your app knows. No managing 403s and 405s.\u000a5. Filters!! Finder, secure, and before and after filters. Applied for **every single level of nesting**. Stay DRY and keep your concerns clean!\u000a6. Represent array/hash data, in any format. JSON provided by default.\u000a7. Sane but overridable defaults.\u000a8. **Single Page Applications (SPAs) need sane, growable APIs**. This is my primary motivation for this library. No display API will be provided for 'new', 'edit', or 'list', because the intention of this library is specifically to solve a data problem, not a display one. Take a look at Angular, Backbone, or Ember if you're looking for an SPA framework.\u000a\u000a### What problems will this library not solve for me?\u000a\u000a1. User authentication. Well outside the purview of this library.\u000a2. The \"V\" of MVC. Views are another domain that needs solving separately.\u000a3. Non-conventional API building. If you want to build APIs that don't conform to REST, you're in the wrong place!\u000a\u000a## Getting Started\u000a\u000a### Step 1: Set up restful-api\u000a\u000a    npm install restful-api --save\u000a\u000a### Step 2: Initialize restful-api\u000a\u000aFirst you have to require the restful-api, at some point after your express initialization.\u000a\u000a    var rest = new require('restful-api')(app); // where 'app' is your express application.\u000a\u000aThere is a second parameter available as a default override. Lets say you decided to call your indices 'list' instead of 'index'. You could apply that as default across your app in one fell swoop, like so:\u000a\u000a    var rest = new require('restful-api')(app, { index: 'list' })\u000a\u000aFor more info on defaults, take a look at `restful-api/lib/defaults.js`\u000a\u000a### Step 3: Register your controllers\u000a\u000aThis isn't obvious when you first look at it, but will become more understandable when you get to Step 5 (where \"Controller\" is explained).\u000a\u000a    rest.register_controller('posts', PostsController)\u000a\u000aor, if you would prefer to regisgter multiple at once...\u000a\u000a    rest.register_controller({ 'posts': PostsController, 'comments': CommentsController })\u000a\u000a### Step 4: Register your resources individually (they can be nested!).\u000a\u000aThe first parameter in the registering of the controller (Step 3) is the what you use as parameters, here.\u000a\u000a    rest.resource('posts')              // <-- Produces /posts pathing!\u000a    rest.resource('posts', 'comments')  // <-- Produces /posts/:post_id/comments pathing! ..hang tight for more info on this.\u000a\u000aThe last parameter may be used for overriding defaults, just the same way as mentioned in Step 2. Ex:\u000a\u000a    rest.resource('posts', { read: 'show' }) // uses the 'show' function on the Controller, instead of the 'read' function.\u000a\u000aAny name that you registered can be added to the options object, plus '_resource', and given a value that you prefer. For example...\u000a\u000a    rest.resource('posts', 'comments', {posts_resource: 'articles', comments_resource: 'blathers'})\u000a\u000aThus setting up your routing to `/articles/:article_id/blathers` instead of `/posts/:post_id/comments`.\u000a\u000aYou can also add specific actions for your controller!\u000a\u000a    // add a GET route for /posts/blather that will be passed to 'blather' in your controller with all filters applied.\u000a    res.resouce('posts', { list_actions: [{http_verb: 'get', controller_action: 'blather'}] })\u000a\u000a    // add a GET route for /posts/:post_id/blather that will be passed to 'blather' in your controller with all filters applied.\u000a    res.resource('posts', { individual_actions: [{http_verb: 'get', controller_action: 'blather'}] })\u000a\u000a### Step 5: Start building your controllers in this fashion!\u000a\u000aThese are the properties and callbacks that a controller may have on it. All callbacks are the last arg of the function signature, \u000aand they all follow the node convention of callback(err, args...).\u000a\u000a    PostsController = {\u000a      // identifier is a string that was passed in the URI.\u000a      // is_index is a boolean for if this was called from an index or not\u000a      // callback takes err and the model. the model will be set on the request object for subsequent requests (pluralized when index, singularized when not).\u000a      finder: function (req, identifier, is_index, callback) {},     \u000a      // is_nested indicates whether this controllers action will be called. \u000a      // is_secure_callback takes err and a boolean to indicate if the request is authorized.\u000a      secure: function (req, is_nested, is_secure_callback) {}, \u000a\u000a      // filters that are run before the resource function. Callback takes err.\u000a      before_filters: [ function (req, res, callback) ],\u000a      // filters that are run after the resource function, and after the response has been sent. Callback takes err.\u000a      after_filters: [ function (req, res, callback) ],\u000a      \u000a      // ** Actions: These are the actually heavy lifters of a resource.\u000a      // data is a callback that accepts error and an array of serializable objects. Each object must contain an 'id' property.\u000a      index: function (req, res, data) {},\u000a      // data is a callback that accepts error and a serializable object. Must contain on 'id' property.\u000a      read: function (req, res, data) {},\u000a      // data is a callback that takes error and a serializable version of the created resource. Must contain an 'id' property.\u000a      create: function (req, res, data) {},\u000a      // data is a callback that takes error and a serializable version of the updated resource. Must contain an 'id' property.\u000a      update: function (req, res, data) {},\u000a      // success is a callback that takes error. If there isn't one, it returns 200 to indicate success.\u000a      remove: function (req, res, success) {}\u000a    }\u000a\u000aNote that if you omit any of these, it doesn't matter! They're simply not applied to that particular resource. Missing a finder? No biggy. No security necessary? Omit the secure property. Don't need an index? Don't use it! That simple. Oh, and if you omit an action, a proper 405 will be returned by default.\u000a\u000a#### Notes\u000a\u000a**Nested Controllers**: When you nest your controllers (say, posts/comments), only the action of the final controller is called. But the finder and secure filters are run on every single controller, from left to right. That means that if you lock down a posts controller, it'll apply all the way down the line. Make sure you make use of the is_nested boolean so that you don't unnecessarily lock down controllers that are further down the execution path!\u000a\u000a**Batch API**: When you use the batch API, you are running the final resources finder, secure, filters, and action, multiple times, with different identifiers for finder each time. So you don't have to change anything in order to deal with those batches.\u000a\u000a### Step 6: ...\u000a\u000a### Step 7: Profit!\u000a\u000a...yup, that's it! It's that easy. And now, you'll have an amazingly easy way to build APIs quickly and efficiently.\u000a\u000a## Comments? Concerns?\u000a\u000aThere is an issue tracker associated with this library on github. Please feel free to open an issue if you feel that something is incorrect, or come find me on twitter: @crueber." -> "ERROR: No README data found!"
38 error Changed: time.modified "2014-05-12T21:16:15.734Z" -> "2014-07-20T06:08:02.484Z"
38 error Added: time.1.0.0
38 error Changed: readmeFilename "README.md" -> ""
38 error Changed: author.name "Christopher WJ Rueber" -> "Dan Cobb"
38 error Added: author.email
38 error Added: author.url
38 error Changed: repository.url "git@github.com:crueber/restful-api.git" -> "https://github.com/cobbdb/rest-interface.git"
38 error Changed: homepage "https://github.com/crueber/restful-api" -> "https://github.com/cobbdb/rest-interface"
38 error Changed: keywords.0 "node" -> "rest"
38 error Changed: keywords.1 "rest" -> "api"
38 error Changed: keywords.3 "resource" -> "seam"
38 error Changed: keywords.4 "representation" -> "standard"
38 error Changed: keywords.5 "represent" -> "simple"
38 error Deleted: keywords.6
38 error Deleted: keywords.7
38 error Deleted: keywords.8
38 error Deleted: keywords.9
38 error Deleted: keywords.10
38 error Deleted: keywords.11
38 error Deleted: keywords.12
38 error Changed: bugs.url "https://github.com/crueber/restful-api/issues" -> "https://github.com/cobbdb/rest-interface/issues"
38 error Added: _attachments: restful-api
38 error     at RegClient.<anonymous> (C:\Program Files\nodejs\node_modules\npm\node_modules\npm-registry-client\lib\request.js:274:14)
38 error     at Request._callback (C:\Program Files\nodejs\node_modules\npm\node_modules\npm-registry-client\lib\request.js:212:65)
38 error     at Request.self.callback (C:\Program Files\nodejs\node_modules\npm\node_modules\request\request.js:123:22)
38 error     at Request.emit (events.js:98:17)
38 error     at Request.<anonymous> (C:\Program Files\nodejs\node_modules\npm\node_modules\request\request.js:893:14)
38 error     at Request.emit (events.js:117:20)
38 error     at IncomingMessage.<anonymous> (C:\Program Files\nodejs\node_modules\npm\node_modules\request\request.js:844:12)
38 error     at IncomingMessage.emit (events.js:117:20)
38 error     at _stream_readable.js:929:16
38 error     at process._tickCallback (node.js:419:13)
39 error If you need help, you may report this *entire* log,
39 error including the npm and node versions, at:
39 error     <http://github.com/npm/npm/issues>
40 error System Windows_NT 6.1.7601
41 error command "C:\\Program Files\\nodejs\\\\node.exe" "C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js" "publish"
42 error cwd F:\wamp\www\rest-interface
43 error node -v v0.10.29
44 error npm -v 1.4.14
45 verbose exit [ 1, true ]
